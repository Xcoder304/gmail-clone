   let primarymail = recivedMails.filter((e) => {
  //       return e.categroy === "Primary";
  //     });
  //     dispatch(setTotalMails({ primarymails: primarymail.length }));

  //     // let socialmail = totalMailindex.filter((e) => {
  //     //   return e.categroy == "Social";
  //     // });
  //     // dispatch(setTotalMails({ socialmails: socialmail.length }));

  //     // let promotionsmail = totalMailindex.filter((e) => {
  //     //   return e.categroy == "Promotions";
  //     // });
  //     // dispatch(setTotalMails({ promotionsmails: promotionsmail.length }));

  //     // let updatemail = totalMailindex.filter((e) => {
  //     //   return e.categroy == "Updates";
  //     // });
  //     // dispatch(setTotalMails({ updatesmails: updatemail.length }));
  //   }



  import { useEffect, useLayoutEffect, useState } from "react";

import Home from "./pages/home/Home";
import Signin from "./components/signin/Signin";
import Loading from "./components/Loading/Loading";
import { RandomPageLoadingTime } from "./helperFuntiions/RamdomLoadingTimeing";

import { selectUser } from "./Redux/features/UserSilce";
import { signin, signOut } from "./Redux/features/UserSilce";
import { useDispatch, useSelector } from "react-redux";
import { onAuthStateChanged } from "firebase/auth";
import { auth } from "./backend/firebase/config";
import { BrowserRouter as Router } from "react-router-dom";

const App = () => {
  const user = useSelector(selectUser);
  const [PageLoading, setPageLoading] = useState(false);
  const [authOfUser, setauthOfUser] = useState(null);
  const dispatch = useDispatch();

  useEffect(() => {
    const unsub = onAuthStateChanged(auth, (authUser) => {
      if (authUser) {
        setauthOfUser(authUser);
      } else {
        setauthOfUser(null);
      }
    });
    return () => unsub();
  }, [user]);

  useLayoutEffect(() => {
    if (authOfUser) {
      setPageLoading(!PageLoading);
      setTimeout(() => {
        dispatch(signin(authOfUser));
        setPageLoading(!PageLoading);
      }, RandomPageLoadingTime());
    } else {
      dispatch(signOut());
    }
    if (!authOfUser) {
      setPageLoading(!PageLoading);
      setTimeout(() => {
        setPageLoading(!PageLoading);
      }, 1500);
    }
  }, [authOfUser]);

  console.log(authOfUser);

  return (
    <div className="App">
      <Router>
        {user ? <Home /> : PageLoading ? <Loading /> : <Signin />}
      </Router>
    </div>
  );
};

export default App;
